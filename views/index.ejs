<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>DLTS Viewer</title>
    <meta name="description" content="DLTS Viewer">
    <meta name="author" content="Alberto Ortiz Flores">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link type="text/css" rel="stylesheet" href="//unpkg.com/bootstrap/dist/css/bootstrap.min.css" />
    <link type="text/css" rel="stylesheet" href="//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.min.css" />
    <script src="//unpkg.com/vue@latest/dist/vue.min.js"></script>
    <script src="//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.min.js"></script>
    <style>
      .main.container {
        margin-top: 1.5rem;
      }
    </style>
  </head>
  <body>
    <div id="app" class="container-fluid"></div>
    <script>
    Vue.use(BootstrapVue);
    const app = new Vue({
      el: '#app',
      name: 'home',
      template: `
      <div class="main container">
        <div class="overflow-auto">
          <h4>{{title}}</h4>
          <br/>
          <b-table striped hover :busy.sync="isBusy" :items="items" :fields="fields" caption-top>
            <template v-slot:table-busy>
              <div class="text-center my-2">
                <b-spinner class="align-middle"></b-spinner>
                <strong>Loading...</strong>
              </div>
            </template>
            <template v-slot:cell(entity_title)="data">
              <a :href="data.item.source">{{data.item.entity_title}}</a>
            </template>
          </b-table>
          <b-pagination
            align="center"
            v-model="currentPage"
            :total-rows="rows"
            :per-page="limit"
            aria-controls="items"
            @input="fetchBooks"
          ></b-pagination>
        </div>
      </div>
      `,
      data() {
        return {
          title: 'List of books',
          fields: [
            {
              key: 'entity_title',
              label: 'Title',
            },
            'identifier',
            {
              key: 'source',
              label: 'Path',
            },
          ],
          currentPage: 1,
          rows: 0,
          start: 0,
          limit: 25,
          isBusy: true,
          items: [],
        };
      },
      mounted() {
        this.fetchBooks();
      },
      methods: {
        fetchBooks() {
          this.isBusy = true;
          this.start = this.currentPage * this.limit;
          this.items = [];
          fetch(`/listBooks?start=${this.start}&limit=${this.limit}`)
            .then((response) => {
              if (response.ok) {
                return response.json();
              }
              throw new Error('Network response was not ok.');
            })
            .then((data) => {
              this.rows = parseInt(data.length, 10);
              data.documents.map((book) => {
                const { identifier } = book;
                book.source = `/book/${identifier}`;
                return this.items.push(book);
              });
            }).finally(() => {
              this.isBusy = false;
            })
            .catch((error) => {
              console.log(`Error! Could not reach the API. ${error}`);
            });
        },
      },      
    });
    </script>
  </body>
</html>
