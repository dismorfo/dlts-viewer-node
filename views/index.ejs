<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>DLTS Viewer</title>
    <meta name="description" content="DLTS Viewer">
    <meta name="author" content="Alberto Ortiz Flores">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <!-- Load required Bootstrap and BootstrapVue CSS -->
    <link type="text/css" rel="stylesheet" href="//unpkg.com/bootstrap/dist/css/bootstrap.min.css" />
    <link type="text/css" rel="stylesheet" href="//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.min.css" />
    <!-- Load polyfills to support older browsers -->
    <script src="//polyfill.io/v3/polyfill.min.js?features=es2015%2CIntersectionObserver" crossorigin="anonymous"></script>
    <!-- Load Vue followed by BootstrapVue -->
    <script src="//unpkg.com/vue@latest/dist/vue.min.js"></script>
    <script src="//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.min.js"></script>
    <style>
      .main.container {
        margin-top: 1.5rem;
      }
    </style>
  </head>
  <body>
    <div id="app" class="container-fluid"></div>
    <script>
    Vue.use(BootstrapVue);    
    const template = `
      <div class="main container">
      <div class="overflow-auto">
      <h4>{{title}}</h4>
      <b-table striped hover :busy.sync="isBusy" :items="items" :fields="fields" caption-top>
        <template v-slot:table-busy>
          <div class="text-center text-danger my-2">
            <b-spinner class="align-middle"></b-spinner>
            <strong>Loading...</strong>
          </div>
        </template>
        <template v-slot:cell(entity_title)="data">
          <router-link :to="data.item.source" replace>{{data.item.entity_title}}</router-link>
        </template>
      </b-table>
        <b-pagination
          align="center"
          use-router
          v-model="currentPage"
          :total-rows="rows"
          :per-page="limit"
          aria-controls="items"
          @input="fetchBooks()"
        ></b-pagination>
      </div>
      </div>
    `;
    new Vue({
      el: '#app',
      template: template,
      mounted() {
        this.fetchBooks();
      },
      data() {
        return {
          fields: [
            {
              key: 'entity_title',
              label: 'Title',
            },
            'identifier',
          ],
          currentPage: 1,
          start: 0,
          rows: 0,
          limit: 10,
          iiifendpoint: '/iiif/2',
          region: 'full',
          rotation: '0',
          size: ',250',
          title: 'List of books',
          subtitle: 'Curated selection of books',
          isBusy: false,
          items: [],
        };
      },
      methods: {
        fetchBooks() {
          this.isBusy = true;
          this.start = this.currentPage * this.limit;
          this.items = [];
          const url = `/listBooks?start=${this.start}&limit=${this.limit}`;
          fetch(url)
            .then((response) => {
              if (response.ok) {
                return response.json();
              }
              throw new Error('Network response was not ok.');
            })
            .then((data) => {
              this.rows = parseInt(data.length, 10);
              data.documents.map((book) => {
                const { image, identifier } = book;
                const id = `http://dlib.nyu.edu/files/${image}`;
                book.thumbnail = `${this.iiifendpoint}/${encodeURIComponent(id)}/${this.region}/${this.size}/${this.rotation}/default.jpg`;
                book.source = `/book/${identifier}/1`;
                return this.items.push(book);
              });
              this.isBusy = false;
            }).catch((error) => {
              console.log(`Error! Could not reach the API. ${error}`);
            });
          },
        },
      });
    </script>
  </body>
</html>
